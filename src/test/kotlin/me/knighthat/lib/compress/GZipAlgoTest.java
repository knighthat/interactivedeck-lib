package me.knighthat.lib.compress;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStream;

class GZipAlgoTest {

    private static String toCompress;

    @BeforeAll
    static void setUp() {
        ClassLoader loader = GZipAlgoTest.class.getClassLoader();
        try (InputStream inStream = loader.getResourceAsStream( "test.profile" )) {

            toCompress = new String( inStream.readAllBytes() );

        } catch (IOException e) {
            throw new RuntimeException( e );
        }
    }
    
    private final byte[] compressedBytes = new byte[]{ 31, -117, 8, 0, 0, 0, 0, 0, 0, -1, -19, 87, 91, 111, -37, 54, 20, 126, -49, -81, 16, -4, 28, 90, -30, 77, -105, -66, -91, -119, -117, 5,
            88, -38, 96, -51, -48, 21, -61, 96, 28, -34, 100, -94, -74, -24, 73, 84, 99, -81, -56, 127, 31, -27, -72, -82, -20, 36, 30, -30, 110, 89, -101, -51, 48, 108, 126, -121, -30, -27, -16, -5,
            -50, -31, -47, -89, -93, 40, 26, -76, -83, 85, -125, 23, -47, -96, 72, 82, 9, -86, 40, 80, -98, 51, -126, 24, 45, 50, 4, -62, 96, -92, -75, -108, 26, 48, 100, 60, 101, -125, -29, 110,
            -124, -78, -51, 124, 10, -53, -41, 48, -45, -35, -64, -85, -119, 109, -94, -16, -67, 0, 91, 69, -105, 80, -22, -11, 83, -38, 64, 59, -11, -31, 9, 95, -73, 122, 101, -86, -35, 117, 19,
            48, 89, 1, -23, -90, -19, -84, -22, 48, 91, -31, 18, -26, -95, 77, 87, 109, -47, 122, -17, 86, 125, -65, 6, 24, 69, -97, 86, -65, -67, -51, 114, 65, 41, 73, -79, 70, 57, -109, 2, 49,
            110, 50, 36, 82, 106, 16, -91, 42, 85, -46, 104, 12, -4, 118, 27, -85, 81, -117, 48, 36, -39, -96, -27, 22, 18, 32, 63, 4, -61, -25, 21, -42, -106, -78, 118, 109, -91, 54, -21, -33, 126
            , 104, 122, -68, 7, 109, -64, 111, -57, -67, -71, 92, -83, 116, 125, -32, 60, -21, -42, -51, 102, -81, -90, 118, -107, -33, -34, -84, -41, -117, -50, 50, 24, -12, 22, 53, -82, -42, -9,
            58, 64, 56, 63, -34, 11, -17, -11, -63, -20, 46, 26, 108, -43, -102, -5, 51, 11, 83, 87, 14, -6, -45, 12, -82, -75, 45, 39, -85, 77, 5, -107, -40, 106, -69, -77, -79, 127, 116, 3, 49,
            -37, 24, 111, -114, -6, -1, 107, 103, -17, 16, 110, 68, 6, -38, 72, -115, 52, 35, 12, 49, 6, -127, -6, -44, 16, 84, 48, -103, -89, -123, -124, 44, -109, -55, 54, -31, -8, 121, 19, 14,
            11, 104, -28, 115, 103, -99, 8, -94, 8, -31, 4, 81, -103, 22, 33, 39, -27, 6, 65, -118, 57, -62, -104, -91, -64, 105, -95, 72, -66, 19, -26, -28, -21, 89, -33, 57, 32, -52, -23, 14, 60,
            -108, 120, -100, 101, 125, 88, 100, 7, 50, 31, 45, 14, -31, 29, 39, 120, -117, 119, 90, 60, -102, -9, 83, 55, 11, -85, 121, -128, 39, -96, 62, 7, 72, -88, -106, 10, -27, -119, -60, 33,
            -32, 73, -118, 10, -82, 66, -122, 103, 25, 39, -104, -89, 57, -91, 108, -101, 122, -6, 0, -11, 30, -102, 29, -22, 65, 122, -21, -86, -79, 95, -50, 87, 110, -67, -71, 28, -67, 30, -65,
            27, -67, 124, 123, 126, 53, -22, -97, 108, 91, -37, -82, 123, -30, -3, -68, 121, 17, -57, -91, -11, -109, 86, 12, -91, -101, -59, 31, -86, -50, -29, 9, -8, -63, 29, -30, 30, 33, 52,
            -100, -9, 79, -118, -109, 62, -54, -1, -65, 79, 62, -9, -3, 35, -14, 74, 56, -109, -123, 76, 104, -88, 29, -80, 68, -52, -120, 20, 1, 43, 12, 82, -102, 64, -54, -76, 76, 50, -93, -10,
            21, 16, -8, 16, -62, -97, -6, 62, -23, -51, 99, -91, -85, 58, -65, -29, -119, -101, -23, 47, -6, -115, -49, -36, 117, 53, 117, -96, -102, -8, 106, -94, -57, -25, -107, 119, 11, 43, -63,
            -37, -86, 28, -65, -102, -62, 71, 87, -93, 100, -120, -109, 33, 69, 115, 25, -105, -127, -92, -72, 108, 109, 44, -100, 107, -4, 114, 60, 113, 31, 117, 61, -100, 87, -27, -35, 40, -8, 15
            , 43, -117, 26, -58, -118, 52, -55, 17, 39, 34, -108, -90, 58, -41, -88, -96, 25, 71, 36, -43, 70, 40, -107, 100, 57, 38, -5, 42, -107, -17, 66, 89, -33, 1, -31, -81, 108, 13, -47, -87,
            83, -6, 9, 56, 7, -98, 105, 16, 34, -68, -124, 0, 7, -60, 48, 103, 72, -32, 46, -91, 80, 102, 100, 78, 10, -54, 68, -70, -81, 78, -7, -62, -7, 95, 94, 86, 47, 79, -34, -2, 48, 30, -3,
            50, 58, -35, 58, 86, 59, -43, -29, 57, -8, -55, -2, 16, 127, 7, -42, -76, 39, -31, 45, 79, -49, -106, -73, 113, -99, 116, 113, -35, 55, 15, -101, -55, 87, -35, 105, -33, -78, 16, -31,
            90, 99, 66, -65, -55, -4, 35, -36, 84, -3, 61, 82, 84, 88, -101, -108, 65, 40, -108, 68, -42, -91, 31, 38, 66, -6, -55, 9, 82, 56, -47, 9, -63, -123, 33, -38, -20, -85, -101, 30, 33,
            -59, -109, -97, -49, -50, -33, -116, 47, 127, 60, 121, 63, -6, -23, 97, 53, -50, 42, 31, 55, -34, -43, 80, -22, -8, 66, 43, 11, -15, 69, -37, 88, 25, 103, -47, 123, 13, 117, 51, -100,
            -51, -23, -77, 85, -36, -11, -17, -1, -110, -38, 46, 92, -27, -102, 57, 72, -83, 30, 82, -100, -11, 48, -75, -14, 94, -51, -47, -28, 33, -51, 29, 117, -2, -33, -4, 9, -14, -12, -89, -50
            , 55, 18, 0, 0 };

    @Test
    void isGZip() {
        try {
            byte[] compressedBytes = GZipAlgo.compress( toCompress.getBytes() );
            Assertions.assertTrue( GZipAlgo.isGZip( compressedBytes ) );
        } catch (IOException e) {
            Assertions.fail( e.getMessage() );
        }
    }

    @Test
    void compress() {
        try {
            byte[] compressedBytes = GZipAlgo.compress( toCompress.getBytes() );
            Assertions.assertArrayEquals( this.compressedBytes, compressedBytes );
        } catch (IOException e) {
            Assertions.fail( e.getMessage() );
        }
    }

    @Test
    void decompress() {
        try {
            byte[] inflated = GZipAlgo.decompress( compressedBytes );
            Assertions.assertEquals( toCompress, new String( inflated ) );
        } catch (IOException e) {
            Assertions.fail( e.getMessage() );
        }
    }
}